* othello(PAIP p.566)
** ボード
*** 2次元配列
    これ以上ない選択に思える
*** 8要素のリストを要素に持つ8要素のリスト(リストのリスト)
    consセルの記憶域とリストの後ろの要素にアクセスする時間が浪費される。
*** 升目が0 - 63の範囲の整数で表現される1次元ベクタ
    ボードの端を認識する必要があるという厄介な問題ながある。
    ±(1 7 8 9)で移動できない。
    8を法とする商と剰余を使用すれば、ボードの端を検査することは可能だが、多少複雑になるしコストがかかる。
*** 100要素のベクタ
    端はマーカーで埋める。
    正当な升目が11 - 88の範囲の数で表現できる。
    水平方向は±1、垂直方向は±10、斜め方向は±9と±11。
** 升目と方向
*** 2要素のリスト
    新しい升目を参照するたびに、新しいconsセルがガーベッジを生成してしまう。
*** consセル
    上に同じ。
*** 複素数(実数部を水平軸に、虚数部を垂直軸に対応させる)
    賢こい選択。
    ある升目から指定された方向への移動は、単純に方向を升目に足せばよい。
    しかし、大半の処理系では、複素数を作成するとガーベッジも生成されるだろう。
*** 升目と方向を2つの個別の整数で表現
    し、それらを操作するルーチンが2つの引き数を受け取るようにすることである。
    効率は良いが重要な抽象化が損われる。
    升目と方向は概念的には単一のオブジェクトだからだ。
